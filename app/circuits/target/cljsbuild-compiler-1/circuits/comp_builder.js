// Compiled by ClojureScript 0.0-2030
goog.provide('circuits.comp_builder');
goog.require('cljs.core');
circuits.comp_builder.build_logic_gate = (function build_logic_gate(species,id){var inputs = cljs.core.PersistentArrayMap.fromArray([cljs.core.constant$keyword$15,cljs.core.PersistentArrayMap.fromArray([cljs.core.constant$keyword$16,1,cljs.core.constant$keyword$17,2,cljs.core.constant$keyword$18,cljs.core.PersistentVector.fromArray([cljs.core.PersistentArrayMap.EMPTY,cljs.core.PersistentArrayMap.EMPTY], true)], true)], true);var outputs = cljs.core.PersistentArrayMap.fromArray([cljs.core.constant$keyword$19,cljs.core.PersistentArrayMap.fromArray([cljs.core.constant$keyword$16,1,cljs.core.constant$keyword$17,1], true)], true);return cljs.core.PersistentArrayMap.fromArray([cljs.core.constant$keyword$20,id,cljs.core.constant$keyword$21,id,cljs.core.constant$keyword$22,species,cljs.core.constant$keyword$23,inputs,cljs.core.constant$keyword$24,outputs,cljs.core.constant$keyword$25,cljs.core.PersistentArrayMap.EMPTY], true);
});
circuits.comp_builder.build_andgate = (function build_andgate(id){return circuits.comp_builder.build_logic_gate("andgate",id);
});
circuits.comp_builder.build_nandgate = (function build_nandgate(id){return circuits.comp_builder.build_logic_gate("nandgate",id);
});
circuits.comp_builder.build_orgate = (function build_orgate(id){return circuits.comp_builder.build_logic_gate("orgate",id);
});
circuits.comp_builder.build_norgate = (function build_norgate(id){return circuits.comp_builder.build_logic_gate("norgate",id);
});
circuits.comp_builder.build_xorgate = (function build_xorgate(id){return circuits.comp_builder.build_logic_gate("xorgate",id);
});
circuits.comp_builder.build_xnorgate = (function build_xnorgate(id){return circuits.comp_builder.build_logic_gate("xnorgate",id);
});
circuits.comp_builder.build_notgate = (function build_notgate(id){var inputs = cljs.core.PersistentArrayMap.fromArray([cljs.core.constant$keyword$15,cljs.core.PersistentArrayMap.fromArray([cljs.core.constant$keyword$16,1,cljs.core.constant$keyword$17,1,cljs.core.constant$keyword$18,cljs.core.PersistentVector.fromArray([cljs.core.PersistentArrayMap.EMPTY], true)], true)], true);var outputs = cljs.core.PersistentArrayMap.fromArray([cljs.core.constant$keyword$19,cljs.core.PersistentArrayMap.fromArray([cljs.core.constant$keyword$16,1,cljs.core.constant$keyword$17,1], true)], true);return cljs.core.PersistentArrayMap.fromArray([cljs.core.constant$keyword$20,id,cljs.core.constant$keyword$21,id,cljs.core.constant$keyword$22,"notgate",cljs.core.constant$keyword$23,inputs,cljs.core.constant$keyword$24,outputs,cljs.core.constant$keyword$25,cljs.core.PersistentArrayMap.EMPTY], true);
});
circuits.comp_builder.build_decoder = (function build_decoder(id){var inputs = cljs.core.PersistentArrayMap.fromArray([cljs.core.constant$keyword$15,cljs.core.PersistentArrayMap.fromArray([cljs.core.constant$keyword$16,2,cljs.core.constant$keyword$17,1,cljs.core.constant$keyword$18,cljs.core.PersistentVector.fromArray([cljs.core.PersistentArrayMap.EMPTY], true)], true),cljs.core.constant$keyword$26,cljs.core.PersistentArrayMap.fromArray([cljs.core.constant$keyword$16,1,cljs.core.constant$keyword$17,1,cljs.core.constant$keyword$18,cljs.core.PersistentVector.fromArray([cljs.core.PersistentArrayMap.EMPTY], true)], true)], true);var outputs = cljs.core.PersistentArrayMap.fromArray([cljs.core.constant$keyword$19,cljs.core.PersistentArrayMap.fromArray([cljs.core.constant$keyword$16,1,cljs.core.constant$keyword$17,4], true)], true);return cljs.core.PersistentArrayMap.fromArray([cljs.core.constant$keyword$20,id,cljs.core.constant$keyword$21,id,cljs.core.constant$keyword$22,"decoder",cljs.core.constant$keyword$23,inputs,cljs.core.constant$keyword$24,outputs,cljs.core.constant$keyword$25,cljs.core.PersistentArrayMap.EMPTY], true);
});
circuits.comp_builder.build_mux = (function build_mux(id){var inputs = cljs.core.PersistentArrayMap.fromArray([cljs.core.constant$keyword$15,cljs.core.PersistentArrayMap.fromArray([cljs.core.constant$keyword$16,1,cljs.core.constant$keyword$17,4,cljs.core.constant$keyword$18,cljs.core.PersistentVector.fromArray([cljs.core.PersistentArrayMap.EMPTY,cljs.core.PersistentArrayMap.EMPTY,cljs.core.PersistentArrayMap.EMPTY,cljs.core.PersistentArrayMap.EMPTY], true)], true),cljs.core.constant$keyword$27,cljs.core.PersistentArrayMap.fromArray([cljs.core.constant$keyword$16,2,cljs.core.constant$keyword$17,1,cljs.core.constant$keyword$18,cljs.core.PersistentVector.fromArray([cljs.core.PersistentArrayMap.EMPTY], true)], true)], true);var outputs = cljs.core.PersistentArrayMap.fromArray([cljs.core.constant$keyword$19,cljs.core.PersistentArrayMap.fromArray([cljs.core.constant$keyword$16,1,cljs.core.constant$keyword$17,1], true)], true);return cljs.core.PersistentArrayMap.fromArray([cljs.core.constant$keyword$20,id,cljs.core.constant$keyword$21,id,cljs.core.constant$keyword$22,"mux",cljs.core.constant$keyword$23,inputs,cljs.core.constant$keyword$24,outputs,cljs.core.constant$keyword$25,cljs.core.PersistentArrayMap.EMPTY], true);
});
circuits.comp_builder.build_dff = (function build_dff(id){var inputs = cljs.core.PersistentArrayMap.fromArray([cljs.core.constant$keyword$15,cljs.core.PersistentArrayMap.fromArray([cljs.core.constant$keyword$16,1,cljs.core.constant$keyword$17,1,cljs.core.constant$keyword$18,cljs.core.PersistentVector.fromArray([cljs.core.PersistentArrayMap.EMPTY], true)], true),cljs.core.constant$keyword$26,cljs.core.PersistentArrayMap.fromArray([cljs.core.constant$keyword$16,1,cljs.core.constant$keyword$17,1,cljs.core.constant$keyword$18,cljs.core.PersistentVector.fromArray([cljs.core.PersistentArrayMap.EMPTY], true)], true)], true);var outputs = cljs.core.PersistentArrayMap.fromArray([cljs.core.constant$keyword$19,cljs.core.PersistentArrayMap.fromArray([cljs.core.constant$keyword$16,1,cljs.core.constant$keyword$17,1], true),cljs.core.constant$keyword$28,cljs.core.PersistentArrayMap.fromArray([cljs.core.constant$keyword$16,1,cljs.core.constant$keyword$17,1], true)], true);return cljs.core.PersistentArrayMap.fromArray([cljs.core.constant$keyword$20,id,cljs.core.constant$keyword$21,id,cljs.core.constant$keyword$22,"dflipflop",cljs.core.constant$keyword$23,inputs,cljs.core.constant$keyword$24,outputs,cljs.core.constant$keyword$25,cljs.core.PersistentArrayMap.fromArray([cljs.core.constant$keyword$15,cljs.core.PersistentVector.fromArray([false], true)], true)], true);
});
circuits.comp_builder.build_tff = (function build_tff(id){var inputs = cljs.core.PersistentArrayMap.fromArray([cljs.core.constant$keyword$15,cljs.core.PersistentArrayMap.fromArray([cljs.core.constant$keyword$16,1,cljs.core.constant$keyword$17,1,cljs.core.constant$keyword$18,cljs.core.PersistentVector.fromArray([cljs.core.PersistentArrayMap.EMPTY], true)], true),cljs.core.constant$keyword$26,cljs.core.PersistentArrayMap.fromArray([cljs.core.constant$keyword$16,1,cljs.core.constant$keyword$17,1,cljs.core.constant$keyword$18,cljs.core.PersistentVector.fromArray([cljs.core.PersistentArrayMap.EMPTY], true)], true)], true);var outputs = cljs.core.PersistentArrayMap.fromArray([cljs.core.constant$keyword$19,cljs.core.PersistentArrayMap.fromArray([cljs.core.constant$keyword$16,1,cljs.core.constant$keyword$17,1], true),cljs.core.constant$keyword$28,cljs.core.PersistentArrayMap.fromArray([cljs.core.constant$keyword$16,1,cljs.core.constant$keyword$17,1], true)], true);return cljs.core.PersistentArrayMap.fromArray([cljs.core.constant$keyword$20,id,cljs.core.constant$keyword$21,id,cljs.core.constant$keyword$22,"tflipflop",cljs.core.constant$keyword$23,inputs,cljs.core.constant$keyword$24,outputs,cljs.core.constant$keyword$25,cljs.core.PersistentArrayMap.fromArray([cljs.core.constant$keyword$15,cljs.core.PersistentVector.fromArray([false], true)], true)], true);
});
circuits.comp_builder.build_register = (function build_register(id){var inputs = cljs.core.PersistentArrayMap.fromArray([cljs.core.constant$keyword$15,cljs.core.PersistentArrayMap.fromArray([cljs.core.constant$keyword$16,8,cljs.core.constant$keyword$17,1,cljs.core.constant$keyword$18,cljs.core.PersistentVector.fromArray([cljs.core.PersistentArrayMap.EMPTY], true)], true),cljs.core.constant$keyword$26,cljs.core.PersistentArrayMap.fromArray([cljs.core.constant$keyword$16,1,cljs.core.constant$keyword$17,1,cljs.core.constant$keyword$18,cljs.core.PersistentVector.fromArray([cljs.core.PersistentArrayMap.EMPTY], true)], true)], true);var outputs = cljs.core.PersistentArrayMap.fromArray([cljs.core.constant$keyword$19,cljs.core.PersistentArrayMap.fromArray([cljs.core.constant$keyword$16,8,cljs.core.constant$keyword$17,1], true)], true);return cljs.core.PersistentArrayMap.fromArray([cljs.core.constant$keyword$20,id,cljs.core.constant$keyword$21,id,cljs.core.constant$keyword$22,"register",cljs.core.constant$keyword$23,inputs,cljs.core.constant$keyword$24,outputs,cljs.core.constant$keyword$25,cljs.core.PersistentArrayMap.fromArray([cljs.core.constant$keyword$15,cljs.core.PersistentVector.fromArray([false], true)], true)], true);
});
circuits.comp_builder.build_inputpin = (function build_inputpin(id){var outputs = cljs.core.PersistentArrayMap.fromArray([cljs.core.constant$keyword$19,cljs.core.PersistentArrayMap.fromArray([cljs.core.constant$keyword$16,1,cljs.core.constant$keyword$17,1], true)], true);return cljs.core.PersistentArrayMap.fromArray([cljs.core.constant$keyword$20,id,cljs.core.constant$keyword$21,id,cljs.core.constant$keyword$22,"inputpin",cljs.core.constant$keyword$23,cljs.core.PersistentArrayMap.EMPTY,cljs.core.constant$keyword$24,outputs,cljs.core.constant$keyword$25,cljs.core.PersistentArrayMap.fromArray([cljs.core.constant$keyword$15,cljs.core.PersistentVector.fromArray([false], true)], true)], true);
});
circuits.comp_builder.build_outputpin = (function build_outputpin(id){var outputs = cljs.core.PersistentArrayMap.fromArray([cljs.core.constant$keyword$19,cljs.core.PersistentArrayMap.fromArray([cljs.core.constant$keyword$16,1,cljs.core.constant$keyword$17,1], true)], true);return cljs.core.PersistentArrayMap.fromArray([cljs.core.constant$keyword$20,id,cljs.core.constant$keyword$10,cljs.core.PersistentVector.fromArray([false], true),cljs.core.constant$keyword$21,id,cljs.core.constant$keyword$22,"outputpin",cljs.core.constant$keyword$23,cljs.core.PersistentArrayMap.fromArray([cljs.core.constant$keyword$15,cljs.core.PersistentArrayMap.fromArray([cljs.core.constant$keyword$16,1,cljs.core.constant$keyword$17,1,cljs.core.constant$keyword$18,cljs.core.PersistentVector.fromArray([cljs.core.PersistentArrayMap.EMPTY], true)], true)], true),cljs.core.constant$keyword$24,outputs,cljs.core.constant$keyword$25,cljs.core.PersistentArrayMap.EMPTY], true);
});
circuits.comp_builder.build_component = (function build_component(species,id){var build_fn = ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(species,"andgate"))?circuits.comp_builder.build_andgate:((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(species,"nandgate"))?circuits.comp_builder.build_nandgate:((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(species,"orgate"))?circuits.comp_builder.build_orgate:((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(species,"norgate"))?circuits.comp_builder.build_norgate:((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(species,"xorgate"))?circuits.comp_builder.build_xorgate:((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(species,"xnorgate"))?circuits.comp_builder.build_xnorgate:((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(species,"mux"))?circuits.comp_builder.build_mux:((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(species,"decoder"))?circuits.comp_builder.build_decoder:((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(species,"notgate"))?circuits.comp_builder.build_notgate:((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(species,"dflipflop"))?circuits.comp_builder.build_dff:((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(species,"tflipflop"))?circuits.comp_builder.build_tff:((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(species,"register"))?circuits.comp_builder.build_register:((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(species,"inputpin"))?circuits.comp_builder.build_inputpin:((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(species,"outputpin"))?circuits.comp_builder.build_outputpin:null))))))))))))));return (build_fn.cljs$core$IFn$_invoke$arity$1 ? build_fn.cljs$core$IFn$_invoke$arity$1(id) : build_fn.call(null,id));
});
